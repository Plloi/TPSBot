trigger:
- master

stages:
- stage: 'BuildBot'
  displayName: 'Build and Test'
  variables:
    GOVERSION: '1.13.5'   # Version of Go tools used for building and testing
    CGO_ENABLED: '0'      # Disable cgo to get a static binary
    GOOS: 'linux'
    GOARCH: 'amd64'
  jobs:
  - job: BuildTestBackend
    displayName: 'Build and Test Go Backend'
    pool:
      vmImage: 'Ubuntu 18.04'
    steps:
    - task: Go@0
      inputs:
        command: 'get'
        arguments: '-d'
        workingDirectory: '$(System.DefaultWorkingDirectory)'
      displayName: 'Get Project Dependancies'
    - task: GoTool@0
      inputs:
        version: $(GOVERSION)
      displayName: 'Install and select Go version $(GOVERSION)'

    - script: |
        # Get tools for converting Go's test reports
        go get -u github.com/jstemmer/go-junit-report 2>&1
        go get -u github.com/axw/gocov/gocov 2>&1
        go get -u github.com/AlekSi/gocov-xml 2>&1

        # Run Go tests and turn output into JUnit test result format
        go test ./... -v -coverprofile=test-coverage.txt -covermode count 2>&1 | $HOME/go/bin/go-junit-report > test-report.xml
        rc=${PIPESTATUS[0]} # Get result code of `go test`
        
        # Convert coverage file into XML
        $HOME/go/bin/gocov convert test-coverage.txt > test-coverage.json
        $HOME/go/bin/gocov-xml < test-coverage.json > test-coverage.xml
        
        # Check if `go test` had an error
        if [ $rc -ne 0 ]; then
          # Let script fail by writing to stderr
          >&2 echo "Tests failed"
        fi
      displayName: 'Run unit tests and convert results'
      failOnStderr: true
    - task: Go@0
      inputs:
        command: 'build'
        arguments: '-a -o TPSBot'
      displayName: 'Build Go application'

    - publish: '$(Build.SourcesDirectory)/TPSBot'
      artifact: 'Executable'
      displayName: 'Publish pipeline artifact'

    - task: PublishTestResults@2
      condition: always()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '*report*.xml' 
        searchFolder: '$(Build.SourcesDirectory)'
      displayName: 'Publish test results'

    - task: PublishCodeCoverageResults@1
      condition: always()
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Build.SourcesDirectory)/test-coverage.xml'
      displayName: 'Publish code coverage results'
